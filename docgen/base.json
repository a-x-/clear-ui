{"animations.js":{"description":"","props":{"progress":{"type":{"name":"number"},"required":true,"description":""},"fn":{"type":{"name":"func"},"required":true,"description":""},"params":{"type":{"name":"object"},"required":false,"description":""},"children":{"type":{"name":"element"},"required":false,"description":""}}},"focusableTappable.js":{"description":"Tappable that supports focusing and pressing with Enter button.","props":{"onFocus":{"type":{"name":"func"},"required":false,"description":""},"onBlur":{"type":{"name":"func"},"required":false,"description":""},"tabIndex":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"","defaultValue":{"value":"0","computed":false}},"preventFocusOnTap":{"type":{"name":"bool"},"required":false,"description":""}},"composes":["./tappable"]},"attachment/index.js":{"description":"Attaches element to target.\nIt uses ZContext to create separate layer and AttachmentClass for attaching.\n@param {object} props.attachment - AttachmentClass option.\n@param {number} [props.viewportPadding] - AttachmentClass option.\n@param {string} [props.mirrorAttachment] - AttachmentClass option.\n@param {function} [props.onChangeAttachment] - AttachmentClass option.\n@param {object} [props.layerProps] - ZContext.Layer props.\n@param {React.Element} props.element - Attached element.\n@param {React.Element} props.children - Attachment target.","props":{"children":{"type":{"name":"element"},"required":true,"description":"Attachment target."},"element":{"type":{"name":"element"},"required":true,"description":"Attached element."},"open":{"type":{"name":"bool"},"required":false,"description":"Controls the visibility of the attached element."},"layerProps":{"type":{"name":"object"},"required":false,"description":"Props passed to `ZContextLayer`."},"attachment":{"type":{"name":"union","value":[{"name":"array"},{"name":"object"}]},"required":true,"description":"Configuration of attachment points or a list of possible configs.\nComponent will choose an attachment that allows element to fit to the viewport.\n\nFormat of the config object is following:\n\n- **element** `string` – Attachment point of the element.\nString of the form of `vert-attachment horiz-attachment`.\nAttachment value is a number with `px` or `%`.\nAlso it supports special values, `vert-attachment` can be\n`'top'`, `'middle'`, `'bottom'`, and `horiz-attachment` can be\n`'left'`, `'right'` and `'center'`.\n\n- **target** `string` – Attachment point of the target element.\n  Format is same as for element.\n\n- **offset** `string` _optional_ – Offset of the element.\n  Format is same as for element and target, but without special values."},"mirrorAttachment":{"type":{"name":"enum","value":[{"value":"'all'","computed":false},{"value":"'vert'","computed":false},{"value":"'horiz'","computed":false},{"value":"'none'","computed":false}]},"required":false,"description":"Axis of attachment that can be mirrored to fit element to the viewport.\nIt is used when single attachment used.\nDefault is `'none'`."},"viewportPadding":{"type":{"name":"number"},"required":false,"description":"Minimal distance from element to the viewport bound. Default is 0."},"constrain":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'right'","computed":false},{"value":"'top'","computed":false},{"value":"'bottom'","computed":false},{"value":"true","computed":false}]},"required":false,"description":""},"onChangeAttachment":{"type":{"name":"func"},"required":false,"description":"(index: number) => void"}}},"button/index.js":{"description":"Base button component.\n\nIt allows to handle taps and display button states\nconsistently across different input methods - touch, mouse or keyboard.","props":{"onTap":{"type":{"name":"func"},"required":false,"description":"Handler of the tap event.\nIt can be triggered with either mouse, touch,\nor with pressing `Enter` key on the focused button."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disabled state of the button."},"tabIndex":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"HTML tabIndex attribute.","defaultValue":{"value":"0","computed":false}},"preventFocusOnTap":{"type":{"name":"bool"},"required":false,"description":"If true, button will became focused when you navigate to it\nusing `Tab` key, but not on click or touch.","defaultValue":{"value":"true","computed":false}},"initialTapState":{"type":{"name":"enum","value":[{"value":"'initial'","computed":false},{"value":"'hovered'","computed":false},{"value":"'pressed'","computed":false}]},"required":false,"description":""},"tapState":{"type":{"name":"enum","value":[{"value":"'initial'","computed":false},{"value":"'hovered'","computed":false},{"value":"'pressed'","computed":false}]},"required":false,"description":"Properties that allow you to control button's tap state from the outside.\nIf they are not present, button will manage tap state inside its\ninternal state."},"onChangeTapState":{"type":{"name":"func"},"required":false,"description":"(tapState) => void"}}},"checkbox/index.js":{"description":""},"dropdownMenu/index.js":{"description":"","props":{"trigger":{"type":{"name":"node"},"required":false,"description":"Trigger element of the dropdown"},"value":{"type":{"name":"string"},"required":false,"description":"Value of the currently selected item."},"onSelect":{"type":{"name":"func"},"required":false,"description":"function(item: ?) => void\n<br/>\nHandler of the selecting item from the dropdown menu."},"width":{"type":{"name":"string"},"required":false,"description":"Width of the dropdown list, in px or % of trigger's width."},"expandSide":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"Horizontal side where the list expands when it is wider than the trigger element.","defaultValue":{"value":"'right'","computed":false}},"vertSide":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'bottom'","computed":false}]},"required":false,"description":"Vertical side where the list shows if there is enough space.","defaultValue":{"value":"'bottom'","computed":false}},"animation":{"type":{"name":"enum","value":[{"value":"'slide'","computed":false},{"value":"'fade'","computed":false}]},"required":false,"description":"TODO","defaultValue":{"value":"'fade'","computed":false}},"maxHeight":{"type":{"name":"number"},"required":false,"description":"Maximum height of the list.","defaultValue":{"value":"Infinity","computed":true}},"listOffset":{"type":{"name":"number"},"required":false,"description":"Distance between the trigger element and the list.","defaultValue":{"value":"10","computed":false}}}},"input/index.js":{"description":"@prop {string} [value]\n@prop {function(value:string)} [onChange]\n@prop {function()} [onFocus]\n@prop {function()} [onBlur]\n@prop {boolean} [disabled]\n@prop {boolean} [multiline]\n@prop {number} [rows=1]\n@prop {number} [maxRows]","props":{"rows":{"defaultValue":{"value":"1","computed":false}},"value":{"defaultValue":{"value":"''","computed":false}}}},"menu/index.js":{"description":"","props":{"value":{"type":{"name":"string"},"required":false,"description":"Value of the currently selected item"},"onSelect":{"type":{"name":"func"},"required":false,"description":"(item: element) => void<br/>\nHandler of the selecting item from the menu."},"active":{"type":{"name":"bool"},"required":false,"description":"When `true`, menu activates keyboard navigation and allows\nto use arrows to navigate and `Enter` to select items."}}},"menu/item.js":{"description":"","displayName":"MenuItem","props":{"value":{"type":{"name":"string"},"required":false,"description":"Value of the item."},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disabled state of the item."},"leftIcon":{"type":{"name":"element"},"required":false,"description":"Icon element that appears at the left side of the item.\nIt can be SVG-icon, font-icon or any arbitrary element."},"rightIcon":{"type":{"name":"element"},"required":false,"description":"Icon element that appears at the right side of the item."},"onRightIconTap":{"type":{"name":"func"},"required":false,"description":"Handler of the tap event on the right icon."},"onTap":{"type":{"name":"custom","raw":"funcOrBoundFuncType"},"required":false,"description":"Handler of the tap event on the item.\nThis property is set automatically,\ninstead you should use `onSelect` prop of the `Menu`."}}},"modal/index.js":{"description":"","props":{"alignTop":{"type":{"name":"bool"},"required":false,"description":"TODO"},"closeOnClickOutside":{"type":{"name":"bool"},"required":false,"description":"Default: true","defaultValue":{"value":"true","computed":false}},"closeOnClick":{"type":{"name":"bool"},"required":false,"description":"Default: true"},"animation":{"type":{"name":"enum","computed":true,"value":"'fade'"},"required":false,"description":"Default: 'fade'","defaultValue":{"value":"'fade'","computed":false}},"closeOnEsc":{"defaultValue":{"value":"true","computed":false}}}},"notifications/abstractNotificationsContainer.js":{"description":"","props":{"isDefault":{"type":{"name":"bool"},"required":false,"description":"Makes container default. Notifications without specified container will be\nplaced inside the default container."},"vertPos":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'bottom'","computed":false}]},"required":false,"description":"Horizontal position of the container.\nPossible values are 'top' and 'bottom'.","defaultValue":{"value":"'top'","computed":false}},"horizPos":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'right'","computed":false},{"value":"'center'","computed":false}]},"required":false,"description":"Vertical position of the container.\nPossible values are 'left', 'right' and 'center'.","defaultValue":{"value":"'right'","computed":false}},"animation":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'slide'","computed":false}}}},"notifications/notification.js":{"description":"Representation of the notification, that initiates render of the\nNotificationView in the container.","displayName":"Notification","props":{"open":{"type":{"name":"bool"},"required":true,"description":"Controls whether the notification is open or not."},"onClose":{"type":{"name":"func"},"required":true,"description":"Function that is called when notification is requested to be closed."},"autoHideTimeout":{"type":{"name":"number"},"required":false,"description":"Time in milliseconds before notification will automatically request closing.","defaultValue":{"value":"3000","computed":false}},"container":{"type":{"name":"object"},"required":false,"description":"Deferred ref to the notification container where notification should be rendered.\nOther options how to specify in which container notification should be placed are\nto place notification inside the container, or to make container default\nby setting prop 'isDefault={true}', and then all notifications without\nspecified container will use it."}}},"radioButtons/radioButton.js":{"description":"","props":{"value":{"type":{"name":"bool"},"required":false,"description":""},"onSelect":{"type":{"name":"func"},"required":false,"description":""},"preventFocusOnTap":{"defaultValue":{"value":"true","computed":false}}}},"radioButtons/radioGroup.js":{"description":""},"scrollspy/index.js":{"description":"Component for automatically updating value based on scroll position.\n\n@param {number} [props.offset=10] - Offset from top when calculating scroll position.\n@param {number} [props.threshold=100] - Distance from top to activate anchor.\n@param {Element|ReactElement|Deferred} [props.container=document.body] -\n   Scrollable element to spy on.\n   It can be DOM-element or React element or deferred resolved to one of it.","props":{"offset":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"10","computed":false}},"threshold":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"100","computed":false}},"container":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"document.body","computed":true}}}},"select/index.js":{"description":"","props":{"value":{"type":{"name":"string"},"required":false,"description":"Value of the select."},"onChange":{"type":{"name":"func"},"required":false,"description":"Handler of value change."},"label":{"type":{"name":"node"},"required":false,"description":"Label that shows when select has no value.","defaultValue":{"value":"'select value'","computed":false}}}},"sticky/index.js":{"description":"","props":{"side":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'bottom'","computed":false}]},"required":false,"description":"Side of the screen to which element sticks.","defaultValue":{"value":"'top'","computed":false}},"offset":{"type":{"name":"number"},"required":false,"description":"Distance from the edge of the screen.","defaultValue":{"value":"0","computed":false}},"container":{"type":{"name":"object"},"required":false,"description":"Container element that restricts position of sticky element.\nIt can be DOM-element or React element or deferred that resolves to\none of it."}}},"switch/index.js":{"description":"","props":{"isSwitched":{"type":{"name":"bool"},"required":false,"description":""},"onSwitch":{"type":{"name":"func"},"required":false,"description":""},"preventFocusOnTap":{"defaultValue":{"value":"true","computed":false}}},"composes":["../focusableTappable"]},"tappable/index.js":{"description":"Helper for handling touch and mouse events for button-like components.\n@param {function} [props.onTap] Tap event handler.\n@param {function(event: object)} [props.onTapStart]\n@param {function(event: object)} [props.onTapEnd]\n@param {function} [props.onHoverStart] TODO\n@param {function} [props.onHoverEnd] TODO\n@param {function} [props.onChangeTapState] ({hovered: boolean, pressed: boolean)\n    Handler of hovered and pressed states changes.","props":{"onChangeState":{"type":{"name":"func"},"required":false,"description":""},"onTap":{"type":{"name":"func"},"required":false,"description":""},"children":{"type":{"name":"element"},"required":true,"description":""}}},"tooltip/index.js":{"description":"","props":{"children":{"type":{"name":"element"},"required":true,"description":""},"tooltip":{"type":{"name":"node"},"required":true,"description":""},"showOnHover":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}},"showOnClick":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"sides":{"type":{"name":"arrayOf","value":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'bottom'","computed":false},{"value":"'right'","computed":false},{"value":"'left'","computed":false}]}},"required":false,"description":"","defaultValue":{"value":"['top', 'right', 'bottom', 'left']","computed":false}},"align":{"type":{"name":"enum","value":[{"value":"'begin'","computed":false},{"value":"'center'","computed":false},{"value":"'end'","computed":false}]},"required":false,"description":"","defaultValue":{"value":"'center'","computed":false}},"offset":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"10","computed":false}},"animation":{"defaultValue":{"value":"false","computed":false}},"openTimeout":{"defaultValue":{"value":"250","computed":false}},"closeTimeout":{"defaultValue":{"value":"0","computed":false}}}},"zContext/index.js":{"description":"Manager of vertical context layers. It helps to avoid conflicts of z-indexes.\nIt must be rendered on the page only once at the top context.\nStatic methods to add layers become available after block is rendered.","displayName":"ZContext"},"zContext/layer.js":{"description":"Renders content on separate layer using ZContext.\n@param {string} [props.type='popup'] - ZContext layer type.\n@param {boolean} [props.global=false]\n@param {function} [props.onRender] - Function that is called on render content in the layer.\n@param {boolean} [props.closeOnEsc=true]\n@param {boolean} [props.overlay=false] - Close page with transparent overlay.\n@param {boolean} [props.closeOnOverlayClick=false]\n@param {function} [props.onClose]","displayName":"ZContextLayer","props":{"open":{"type":{"name":"bool"},"required":false,"description":""},"onClose":{"type":{"name":"func"},"required":false,"description":""},"type":{"type":{"name":"enum","computed":true,"value":"LAYER_TYPES"},"required":false,"description":"","defaultValue":{"value":"'popup'","computed":false}},"global":{"type":{"name":"bool"},"required":false,"description":""},"closeOnEsc":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}},"overlay":{"type":{"name":"bool"},"required":false,"description":""},"closeOnOverlayClick":{"type":{"name":"bool"},"required":false,"description":""},"onRender":{"type":{"name":"func"},"required":false,"description":""}}}}